<div class="row px-3 pb-3">
	<div class="col-lg-3 bold text-lg-right my-auto">
		{{ this.args.label }}
		{%- if this.args.description %}
			<sup data-toggle="tooltip" title="{{ this.args.description }}"><i class="far fa-question-circle"></i></sup>
		{% endif -%}:
	</div>
	<div class="col-lg-6 pt-2 pt-lg-0">
		<select
			id="{{ this.args.name }}"
			name="{{ this.args.name }}"
			class="form-control nodecoration tiny bg-white px-2 py-1 mb-0"
		>
		{% for choice in this.args.choices %}
			<option{% if choice == this.args.default %} selected{% endif %}>{{ choice }}</option>
		{% endfor %}
		</select>
	</div>
</div>

<script>
(function() {
	var selectBox = document.getElementById('{{ this.args.name }}');

	window.addEventListener("message", (event) => {
		var localhost_patt = /^http:\/\/localhost:[0-9]+$/;
		var xenabrowser_patt = /^https:\/\/([a-z]+\.)?xenabrowser.net$/;
		var georgetown = 'https://gdochub.georgetown.edu';
		if (!localhost_patt.test(event.origin) && !xenabrowser_patt.test(event.origin) && !event.origin.startsWith(georgetown))
			return;

		var para = JSON.parse(event.data);
		var unit = para.preferredExpression.unit;

		var rawCountPattern = /^(expected_count|est_count|count|counts)$/; //raw count unit:  est_counts (kallisto)  expected_count (RSEM) count counts
		var logRawCountPattern = /\(\s*(expected_count|est_count|count|counts)\s*(\+\s*\d+(\.\d+)?)?\)/; // log version of the raw count

		var rawCountData = unit && unit.trim().toLowerCase().includes("count") && (rawCountPattern.test(unit.trim().toLowerCase()) || logRawCountPattern.test(unit.trim().toLowerCase()));
		var countData = unit && unit.trim().toLowerCase().includes("count");
		var tpmData = unit && unit.trim().toLowerCase().includes("tpm");
		var fpkmData = unit && unit.trim().toLowerCase().includes("fpkm");
		var logData = unit && unit.trim().toLowerCase().startsWith("log");

		if (countData || tpmData || fpkmData || logData) {
			selectBox.value = 'limma_voom';
		} else { /* no unit or unknown unit */
			for (var i=0; i<selectBox.length; i++) {
				var s = 'characteristic direction';
				selectBox.innerHTML=''
				var option = document.createElement("option");
				option.value = s;
				option.text  =s;
				selectBox.appendChild(option);
			}
		}

		if (!rawCountData) {
			for (var i=0; i<selectBox.length; i++) {
				if (selectBox.options[i].value == 'edgeR')
					selectBox.remove(i);
			}
			for (var i=0; i<selectBox.length; i++) {
				if (selectBox.options[i].value == 'DESeq2')
					selectBox.remove(i);
			}
		}

		event.source.postMessage('ack', '*');
	}, false);
})();

</script>